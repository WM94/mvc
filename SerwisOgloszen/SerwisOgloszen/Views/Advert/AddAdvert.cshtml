@model DAL.ViewModel.OgloszenieModelView

<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>





@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>OgloszenieModelView</legend>

        <div class="editor-label">

            @Html.LabelFor(model => model.Cena)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Cena)
            @Html.ValidationMessageFor(model => model.Cena)
        </div>

        <div class="editor-label">

            @Html.LabelFor(model => model.Nazwa)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Nazwa)
            @Html.ValidationMessageFor(model => model.Nazwa)
        </div>

        <div class="editor-label">

            @Html.LabelFor(model => model.Opis)
        </div>

        <div class="editor-field">
            @Html.EditorFor(model => model.Opis)
            @Html.ValidationMessageFor(model => model.Opis)
        </div>

    
   

        <div class="tablediv">



            <table id="UserItemsTable" class="table table-condensed">
                <thead>
                    <tr>
                        <th> id </th>
                        <th> Nazwa </th>
                        <th> Opis </th>
                        <th> # </th>
                        <th> # </th>
                    </tr>

                </thead>

                <tbody id="UserItemsTableBody"></tbody>
            </table>
        </div>

        <input id="AddNewItem" type="button" value="Dodaj nowy przedmiot" />

        <div    id="AddNewItemDiv">
            <p>Nazwa:</p>
            <input id="Name" placeholder="wpisz nazwe" type="text" />
            <p>Opis:</p>
            <textarea maxlength="50" placeholder="Describe yourself here..." id="Description"> </textarea>
            <br/>
            <input id="AcceptItemButton" type="button" value="Akceptuj" />
        </div>


        <div id="category">
            <ol id="category-list"></ol>


        </div>
        <p>
            <input type="button" id="AddAdvert" value="Dodaj Ogłoszenie" />
        </p>

    </fieldset>
}

 
    <input id="fileUpload" type="file" name="file" />
    

<script>

    function ChooseItem(id) {
    
        var x = id;
        scope.SetChoosenItem(id);


    }
    function RemoveItem(id) {
        
        var x = id;
    }

    function AddAdvertScope() {

        var self = this;
        var ChoosenItem = 0;

        this.SetChoosenItem = function(id)
        {
            alert("Wybrano przedmiot");
            ChoosenItem = id;
        }
        this.GetChoosenItem = function  () {
            return ChoosenItem;
        }

        this.InitButtons = function () {
            $('#AcceptItemButton').click(AddItemToTable);
            $('#AddNewItem').click(UnhiddenForm);
            $('#AddAdvert').click(AddAdvert);


        };

        function UnhiddenForm()
        {
        

            debugger
            if ($('#AddNewItemDiv').is(':hidden'))
            {
                $('#AddNewItemDiv').css('visibility', 'visible');
                $('#AddNewItem').css('value', 'Ukryj formularz');
            }
            else {
                $('#AddNewItemDiv').css('visibility', 'hidden');
                $('#AddNewItem').css('value', 'Dodaj nowy przedmiot');
            }
       
        }

        function AddAdvert() {
        
            var _category = [];
            var files = $("#fileUpload").get(0).files;
            debugger;
            var X= files[0];


        
            if (ChoosenItem == 0) {
                alert("Wybierz przedmiot");
                return;
            }

            $('#category').find('*').each(function () {
                var item = $(this);
                if (item.is("input:radio:checked")) {

                    debugger
                    _category.push(item.val());

                }

            });

            var _advert = 
            {
         
                Cena: $('#Cena').val(),
                Id_Przedmiot: scope.GetChoosenItem(),
                Opis :$('#Opis').val(),
                Nazwa: $('#Nazwa').val(),
                url_zdjecie: files[0]

            };

            if (_category.length == 0)
            {
                alert("Wybierz przynajmniej jedną kategorię");
                return;
            }


            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: "/Advert/AddAdvert",
                enctype:"multipart/form-data",
                data: JSON.stringify({ advert :_advert,category:_category }),
                success: function (result) {
                    debugger
                    if (result.url) {

                         window.location.href = result.url;
                        // if the server returned a JSON object containing an url 
                        // property we redirect the browser to that url


                        //$.ajax({
                        //    type: "POST",
                           
                        //    url: "/Advert/File",
                        //    enctype: "multipart/form-data",
                        //    data: files[0],
                        //    success: function (result) {
                        //        debugger
                        //       // if (result.url) {
                        //            // if the server returned a JSON object containing an url 
                        //            // property we redirect the browser to that url


                        //           /// window.location.href = result.url;
                        //        //}

                        //    }

                        //});


                     
                    }

                }

            });

        };





        function GetRowInTable(id, name, description) {

            var string = '<tr id=' + id + '> <td> ' + id + '</td><td>' + name + ' </td> <td>' + description + ' </td> <td><input class=\'btn\' value=\'wybierz\' type=\'button\' onclick=\'ChooseItem(' + id + ') \'></input> <input class=\'btn\' value=\'usun\' type=\'button\' onclick=\'RemoveItem(' + id + ') \'></input> </td>  </tr>';
            return string;
        }
        function AddItemToTable() {

            var _name = $('#Name').val();
            var _desccription = $('#Description').val();
            debugger
            var urlAdres = "@Url.Action("AddItemToDatabase", "Item")";

            $.ajax({
                type: "GET",
                url: urlAdres,
                data: { name: _name, description: _desccription },
                success: function (data) {
                    debugger
                    var row = GetRowInTable(data, _name, _desccription);
                    $("#UserItemsTableBody").append(row);
                },
                error: function (error) {
                    alert("error");
                }
            });

        };
        this.GetCategory = function () {

            var urlAdres = "@Url.Action("GetAllCategory", "Category")";

            $.ajax({
                type: "GET",
                url: urlAdres,
                success: function (data) {
                    $.each(data, function (key, value) {

                        if (value.IdParent == undefined || value.IdParent == null) {
                            $("#category-list").append('<li class=' + value.Id + '><input type="radio" value=' + value.Id + '  name=' + value.Id + ' > </input>  <label>' + value.Nazwa + '</label> </li>');

                        }
                        else {
                            var item = $("#category-list li[class=" + value.IdParent + "]");
                            var child = item.find("li");
                            if (child.length == 0) {
                                item.append('<ol class=' + value.IdParent + '> </ol>');
                            }

                            $("#category-list ol[class=" + value.IdParent + "]").append('<li class=' + value.Id + '><input type="radio" value=' + value.Id + '  name=' + value.MainParent + ' > </input>  <label>' + value.Nazwa + '</label> </li>');
                        }

                    })
                },
                error: function (error) {
                    alert("error");

                }
            });
        }

        this.GetUsersItems = function () {
            var urlAdres = "@Url.Action("GetItemUsersByID", "Item")";
            debugger;
            $.ajax({
                type: "GET",
                url: urlAdres,
                success: function (data) {
                    $.each(data, function (key, value) {
                        var row = GetRowInTable(value.Id, value.Nazwa, value.Opis);
                        $("#UserItemsTableBody").append(row);
                    })
                },
                error: function (error) {
                    alert("error");

                }
            });
        }
    }




    $(document).ready(function () {


        scope = new AddAdvertScope();
        scope.InitButtons();
        scope.GetCategory();
        scope.GetUsersItems();

    });
</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
